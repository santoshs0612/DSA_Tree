Given a binary tree. The task is to find subtree with maximum sum in the tree and return its sum.

Example 1:

Input:
              1
            /   \
           2      3
          / \    / \
         4   5  6   7
Output: 28
Explanation: 
As all the tree elements are positive,
the largest subtree sum is equal to
sum of all tree elements.

Example 2:
Input:
               1
            /    \
          -2      3
          / \    /  \
         4   5  -6   2
Output: 7
Explanation: 
Subtree with largest sum is : 
  -2
 /  \ 
4    5
Also, entire tree sum is also 7.




//User function Template for C++

class Solution {
  public:
    int solverLSTS(Node* root, int &ans)
    {
        if(root==NULL)
        {
            return 0;
        }
        int cur_data= root->data;
        int leftSum= solverLSTS(root->left,ans);
        int rightSum=solverLSTS(root->right,ans);
        cur_data+= leftSum+rightSum;
        
        ans= max(ans,cur_data);
        
        return cur_data;
    }
    // Function to find largest subtree sum.
    int findLargestSubtreeSum(Node* root)
    {
        //Write your code here
        int ans= INT_MIN;
        
        solverLSTS(root, ans);
        return ans;
    }
};
