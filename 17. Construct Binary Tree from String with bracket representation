Construct a binary tree from a string consisting of parenthesis and integers. The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the roots value and a pair of parenthesis contains a child binary tree with the same structure. Always start to construct the left child node of the parent first if it exists. The integer values will be less than or equal to 10^5.

Example 1:

Input: "1(2)(3)" 
Output: 2 1 3
Explanation:
           1
          / \
         2   3
Explanation: first pair of parenthesis contains 
left subtree and second one contains the right 
subtree. Inorder of above tree is "2 1 3".
Example 2:

Input: "4(2(3)(1))(6(5))"
Output: 3 2 1 4 5 6
Explanation:
           4
         /   \
        2     6
       / \   / 
      3   1 5  





//User function Template for C++

/*
class Node
{
public:
    int data;
    Node *left, *right;
    Node(int data)
    {
        this->data = data;
        this->left = this->right = NULL;
    }
};
*/


class Solution{
public:
    // function to construct tree from string
    
    int findind(string str, int start, int end)
    {
        if(start>end)
        {
            return -1;
        }
        stack<char> s;
        
        for(int i=start;i<=end;i++)
        {
            
            if(str[i]=='(')
            {
                s.push(str[i]);
            }
            else if(str[i]==')')
            {
                if(s.top()=='(')
                {
                    s.pop();
                
                if(s.size()==0)
                {
                    return i;
                }
                }
            }
        }
        return -1;
    }
    Node* solver_Rec(string str, int start, int end)
    {
        // Base condition 
        if(start>end)
        {
            return NULL;
        }
        
        int num=0;
        // extracting number from current start index
        while(start<=end && str[start]!='(' && str[start]!=')'){
            num = num*10+ str[start++]-'0';
        }
        start--;
        // new root for current number 
        Node* root= new Node(num);
        int ind=-1;
        // finding out the index where the left side end 
        if(start+1<=end and str[start+1]=='(')
        {
            ind  = findind(str,start+1,end);
        }
        
        // for going in left first then right with start+2 
        if(ind!=-1)
        {
            root->left= solver_Rec(str,start+2,ind-1);
            root->right= solver_Rec(str,ind+2,end-1);
        }
        return root;
    }
    
    Node *treeFromString(string str){
        // code here
        
        int n= str.length();
        
        return solver_Rec(str,0,n-1);
    }
};
