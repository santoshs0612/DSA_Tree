Given a binary tree and two node values your task is to find the minimum distance between them.
The given two nodes are guaranteed to be in the binary tree and nodes are numbered from 1 to N.
Please Note that a and b are not always leaf node.

Example 1:

Input:
        1
      /  \
     2    3
a = 2, b = 3
Output: 2
Explanation: The tree formed is:
       1
     /   \ 
    2     3
We need the distance between 2 and 3.
Being at node 2, we need to take two
steps ahead in order to reach node 3.
The path followed will be:
2 -> 1 -> 3. Hence, the result is 2. 


/* A binary tree node
struct Node
{
    int data;
    Node* left, * right;
}; */

class Solution{
    public:
    Node* lca(Node* root, int a, int b)
    {
        if(root==NULL)
        {
            return NULL;
        }
        
        if(root->data== a || root->data==b)
        {
            return root;
        }
        
        Node* leftAns = lca(root->left,a,b);
        Node* rightAns = lca(root->right,a,b);
        
        if(leftAns!=NULL && rightAns==NULL)
        {
            return leftAns;
        }
        else if(rightAns!=NULL && leftAns==NULL)
        {
            return rightAns;
        }
        else if(leftAns!=NULL && rightAns!=NULL)
        {
            return root;
        }
        else 
        {
            return NULL;
        }
    }
    
    int distLca(Node* root, int a)
    {
        if(root==NULL)
        {
            return 1e9;
        }
        
        if(root->data==a)
        {
            return 0;
        }
        
        return 1+min(distLca(root->left,a),distLca(root->right,a));
        
    }
    /* Should return minimum distance between a and b
    in a tree with given root*/
    int findDist(Node* root, int a, int b) {
        // Your code here
        Node* LCA= lca(root,a,b);
        
        int diatance =distLca(LCA,a)+distLca(LCA,b);
        
        return diatance;
    }
};
