Given a binary tree of size  N, a node, and a positive integer k., Your task is to complete the function kthAncestor(), the function should return the kth ancestor of the given node in the binary tree. If there does not exist any such ancestor then return -1.
Note: It is guaranteed that the node exists in the tree.


Example 1:



Input:
     K = 2
     Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree.
 

Example 2:

Input:
k=1 
node=3
      1
    /   \
    2     3

Output:
1
Explanation:
K=1 and node=3 ,Kth ancestor of node 3 is 1.





//User function Template for C++
/*
Structure of the node of the binary tree is as
struct Node
{
	int data;
	struct Node *left, *right;
};
*/

Node* solverKthAnsces(Node* root, int &k,int node)
{
    // Base case 
    if(root== NULL)
    {
        return NULL;
    }
    if(root->data== node)

    {
        return root;
    }
    // traversing in left and right 
    Node* leftAns= solverKthAnsces(root->left, k, node);
    Node* rightAns= solverKthAnsces(root->right, k, node);
    
    // condition when one side found the node for left or right
    if(leftAns!=NULL && rightAns== NULL)
    {
        // decrement the k
        k--;
        // if k is zero the return root
        if(k<=0)
        {
            k= INT_MAX;
            return root;
        }
        return leftAns;
    }
    else if(leftAns==NULL && rightAns!= NULL)
    {
        k--;
        if(k<=0)
        {
            // Ans lock beacuse after any iteration we cant reduce k 
            k= INT_MAX;
            return root;
        }
        return rightAns;
    }
    return NULL;
}
// your task is to complete this function
int kthAncestor(Node *root, int k, int node)
{
    // Code here
    
    Node* newNode= solverKthAnsces(root,k,node);
    // edge case when node is root node 
    if(newNode== NULL || newNode->data ==node)
    {
        return -1;
    }
    else 
    {
        return newNode->data;
    }
}
