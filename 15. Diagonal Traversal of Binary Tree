Given a Binary Tree, print the diagonal traversal of the binary tree.

Consider lines of slope -1 passing between nodes. Given a Binary Tree, print all diagonal elements in a binary tree belonging to same line.
If the diagonal element are present in two different subtress then left subtree diagonal element should be taken first and then right subtree. 

Example 1:

Input :
            8
         /     \
        3      10
      /   \      \
     1     6     14
         /   \   /
        4     7 13
Output : 8 10 14 3 6 7 13 1 4
Explanation:
unnamed
Diagonal Traversal of binary tree : 
 8 10 14 3 6 7 13 1 4






/* A binary tree node
struct Node
{
    int data;
    Node* left, * right;
}; */


vector<int> diagonal(Node *root)
{
   // your code here
   
   vector<int> ans;
   // Node for storing the left of every node
   queue<Node*> q;
   q.push(root);
   while(!q.empty())
   {
       // Extracting the node from queue and store the left and traverse right
       Node* curr = q.front();
       q.pop();
       // For curr node evaluation 
       while(curr)
       {
           // push node into queue
           if(curr->left)
           {
               q.push(curr->left);
           }
           // push data of root and right of root
           ans.push_back(curr->data);
           // updating curr for right 
           curr= curr->right;
       }
   }
   return ans;
   
}
