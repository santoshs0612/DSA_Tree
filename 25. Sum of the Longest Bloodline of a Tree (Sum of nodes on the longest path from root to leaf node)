Given a binary tree of size N. Your task is to complete the function sumOfLongRootToLeafPath(), that find the sum of all nodes on the longest path from root to leaf node.
If two or more paths compete for the longest path, then the path having maximum sum of nodes is being considered.

Example 1:

Input: 
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3    
      /
     6
Output: 13
Explanation:
        4        
       / \       
      2   5      
     / \ / \     
    7  1 2  3 
      /
     6

The highlighted nodes (4, 2, 1, 6) above are 
part of the longest root to leaf path having
sum = (4 + 2 + 1 + 6) = 13
Example 2:

Input: 
          1
        /   \
       2     3
      / \   / \
     4   5 6   7
Output: 11


//User function Template for C++

/*
structure of the node of the binary tree is as
struct Node
{
    int data;
    struct Node *left;
    struct Node *right;

    Node(int x)
    {
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/
class Solution
{
public:
    // pair of ans having <Max_sum, max_len>
    pair<int,int> ans;
    void solverSLBT(Node* root, int level,int sum)
    {
        // base condition 
        if(root==NULL)
        {
            if(level>ans.second)
            {
                ans.first= sum;
                ans.second= max(ans.second,level);
            }
            else if(level==ans.second)
            {
                ans.first= max(ans.first,sum);
            }
            return;
        }
        solverSLBT(root->left,level+1,sum+root->data);
        
        solverSLBT(root->right,level+1,sum+root->data);
        return;
    }
    int sumOfLongRootToLeafPath(Node *root)
    {
        //code here
        
        solverSLBT(root,0,0);
        
        return ans.first;
    }
};
