Given a binary tree and an integer K. Find the number of paths in the tree which have their sum equal to K.
A path may start from any node and end at any node in the downward direction.


Example 1:

Input:      
Tree = 
          1                               
        /   \                          
       2     3
K = 3
Output: 2
Explanation:
Path 1 : 1 + 2 = 3
Path 2 : only leaf node 3
Example 2:

Input: 
Tree = 
           1
        /     \
      3        -1
    /   \     /   \
   2     1   4     5                        
        /   / \     \                    
       1   1   2     6    
K = 5                    
Output: 8
Explanation:
The following paths sum to K.  
3 2 
3 1 1 
1 3 1 
4 1 
1 -1 4 1 
-1 4 2 
5 
1 -1 5 



//User function template for C++

/*
struct Node 
{
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution{
  public:
  void solverPathSumK(Node* root, int k, int &count, vector<int> &path)
  {
      if(root==NULL)
      {
          return;
      }
      // path vector push the data 
      path.push_back(root->data);
      
      // left calling of function 
      solverPathSumK(root->left,k,count,path);
      
      // right calling of function 
      solverPathSumK(root->right,k,count,path);
      
      int n = path.size();
      int sum=0;
      // exploring the path vector for k sum
      for(int i=n-1;i>=0;i--)
      {
          sum+=path[i];
          if(sum==k)
          {
              count++;
          }
      }
      
      // poping the data from path vector 
      path.pop_back();
  }
    int sumK(Node *root,int k)
    {
        // code here 
        int count=0;
        vector<int> path;
        
        solverPathSumK(root,k,count,path);
        return count;
    }
};
