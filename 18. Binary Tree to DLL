Given a Binary Tree (BT), convert it to a Doubly Linked List(DLL) In-Place. The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be same as Inorder of the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.

Note: H is the height of the tree and this space is used implicitly for the recursion stack.
 

TreeToList

Example 1:

Input:
      1
    /  \
   3    2
Output:
3 1 2 
2 1 3 
Explanation: DLL would be 3<=>1<=>2
Example 2:

Input:
       10
      /   \
     20   30
   /   \
  40   60
Output:
40 20 60 10 30 
30 10 60 20 40
Explanation:  DLL would be 
40<=>20<=>60<=>10<=>30.







/* Structure for tree and linked list

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 */

// This function should return head to the DLL
class Solution
{
    public: 
    Node* solverBtoD(Node* root,Node* &head,Node* &prev)
    {
        // base condition of function 
        if(root==NULL)
        {
            return NULL;
        }
        // Go into left of tree
        solverBtoD(root->left,head,prev);
        // This will execute once when prev null for assigning head with root
        if(prev==NULL)
        {
            head = root;
        }
        else 
        {
            //  Prev<---root
            root->left= prev;
            prev->right= root;
        }
        prev= root;
        // go into right of tree 
        solverBtoD(root->right,head,prev);
    }
    //Function to convert binary tree to doubly linked list and return it.
    Node * bToDLL(Node *root)
    {
        // your code here
        
        // head of DLL
        Node* head =NULL;
        // prev node for storing current node 
        Node* prev= NULL;
        
        // Main function to convert B to D
        solverBtoD(root,head,prev);
        
        return head;
        
    }
};
