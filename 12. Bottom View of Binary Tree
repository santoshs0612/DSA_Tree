Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree the output should be 5 10 4 14 25.

Note: The Input/Output format and Example given are used for the system's internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from the stdin/console. The task is to complete the function specified, and not to write the full code.
 

Example 1:

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation:
First case represents a tree with 3 nodes
and 2 edges where root is 1, left child of
1 is 3 and right child of 1 is 2.

Thus nodes of the binary tree will be
printed as such 3 1 2.
Example 2:

Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30






//Function to return a list containing the bottom view of the given tree.

class Solution {
  public:
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int> ans;
        // map for storing the desired data 
        map<int,int> mp;
        // queue for node and line storing
        queue<pair<Node*,int>> q;
        // initial root with line 0
        q.push({root,0});
        while(!q.empty())
        {
            pair<Node*,int> temp=q.front();
            q.pop();
            // curr root
            Node* curr= temp.first;
            // curr root line 
            int line= temp.second;
            // replacing the data for every iteration 
            mp[temp.second]=curr->data;
            // put data in queue it left present 
            if(curr->left)
            {
                q.push({curr->left,line-1});
            }
            // put data in queue if right node present 
            if(curr->right)
            {
                q.push({curr->right,line+1});
            }
        }
        // just put all pair into a vector 
        for(auto it:mp)
        {
            ans.push_back(it.second);
        }
        return ans;
    }
};
