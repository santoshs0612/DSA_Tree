Given a binary tree, find its preorder traversal.

Example 1:

Input:
        1      
      /          
    4    
  /    \   
4       2
Output: 1 4 4 2 
Example 2:

Input:
       6
     /   \
    3     2
     \   / 
      1 2
Output: 6 3 1 2 2 









void preorder_solver(Node* root, vector<int>& ans)
{
    if(root==NULL)
    {
        return;
    }
    ans.push_back(root->data);
    preorder_solver(root->left,ans);
    preorder_solver(root->right,ans);
    return;
}
//Function to return a list containing the preorder traversal of the tree.
vector <int> preorder(Node* root)
{
  // Your code here
  // Recurssive approach O(N)+O(N) function stack space
//   vector<int> ans;
//   preorder_solver(root,ans);
//   return ans;
    vector<int> ans;
    
    stack<Node*> s;
    s.push(root);
    while(!s.empty())
    {
        Node* curr=s.top();
        s.pop();
        ans.push_back(curr->data);
        if(curr->right)
        {
            s.push(curr->right);
        }
        if(curr->left)
        {
            s.push(curr->left);
        }

    }
    return ans;
  
}
