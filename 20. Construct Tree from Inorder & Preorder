

Given 2 Arrays of Inorder and preorder traversal. The tree can contain duplicate elements. Construct a tree and print the Postorder traversal. 

Example 1:

Input:
N = 4
inorder[] = {1 6 8 7}
preorder[] = {1 6 7 8}
Output: 8 7 6 1
Example 2:

Input:
N = 6
inorder[] = {3 1 4 0 5 2}
preorder[] = {0 1 3 4 2 5}
Output: 3 4 1 5 2 0
Explanation: The tree will look like
       0
    /     \
   1       2
 /   \    /
3    4   5




/*Complete the code here.
Node is as follows:
struct Node
{
  int data;
  Node* left;
  Node* right;
};
*/
class Solution{
    public:
    Node* buildtree(int pre[],int &startpre,int endpre,int in[],int startin,int endin)
    {
        // Base Condition  
        if(startpre>endpre || startin>endin)
        {
            return NULL;
        }
        // Create a node with root from preorder 
        Node* root= new Node(pre[startpre++]);
        int inroot;
        
        // Findout the place of root in inorder array
        for(int i=startin;i<=endin;i++)
        {
            if(in[i]==root->data)
            {
                inroot=i;
                break;
            }
        }
        // Pass it for left and right sub tree 
        root->left=buildtree(pre,startpre,endpre,in,startin,inroot-1);
        root->right=buildtree(pre,startpre,endpre,in,inroot+1,endin);
        
        return root;
    }
    Node* buildTree(int in[],int pre[], int n)
    {
        // Code here
        // Imp the preorder start we have to pass bt reference so it can be updated subseqent 
        int startpre=0;
        Node* root = buildtree(pre,startpre,n-1,in,0,n-1);
        return root;
    }
};
