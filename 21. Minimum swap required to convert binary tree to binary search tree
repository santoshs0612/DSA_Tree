Given an array A[] which represents a Complete Binary Tree i.e, if index i is the parent, index 2*i + 1 is the left child and index 2*i + 2 is the right child.
The task is to find the minimum number of swaps required to convert it into a Binary Search Tree. 

Example 1:

Input:
A[] = { 5, 6, 7, 8, 9, 10, 11 }
Output: 3
Explanation: 
Binary tree of the given array:

Swap 1: Swap node 8 with node 5.
Swap 2: Swap node 9 with node 10.
Swap 3: Swap node 10 with node 7.

So, minimum 3 swaps are required.
Example 2:

Input: 
A[] = {1, 2, 3}
Output: 1





//User function Template for C++
class Solution{
  public:
    // Getting the inorder traversal of vector 
    void inorderTrv(vector<int> &A, vector<int> &B,int n,int ind)
    {
        if(ind>=n)
        {
            return;
        }
        inorderTrv(A,B,n,2*ind+1);
        B.push_back(A[ind]);
        inorderTrv(A,B,n,2*ind+2);
        
    }
    int minSwaps(vector<int>&A, int n){
        //Write your code here
        int swapCount=0;
        vector<int> inorder;
        // inorder  traversal of vector stored in inorder 
        inorderTrv(A,inorder,n,0);
        
        vector<pair<int,int>> v;
        // making pair with inorder with index
        for(int i=0;i<n;i++)
        {
            v.push_back({inorder[i],i});
        }
        // sort with the first element 
        sort(v.begin(),v.end());
        
        for(int i=0;i<n;i++)
        {
            pair<int,int> temp=v[i];
            
            int ind= temp.second;
            // if second index not equal then increase swap count 
            if(i!=ind)
            {
                swapCount++;
                swap(v[i],v[ind]);
                // start checking form same index 
                i--;
            }
        }
        
        return swapCount;
    
        
    }
    
    
};
