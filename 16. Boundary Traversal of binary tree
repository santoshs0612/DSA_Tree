Given a Binary Tree, find its Boundary Traversal. The traversal should be in the following order: 

Left boundary nodes: defined as the path from the root to the left-most node ie- the leaf node you could reach when you always travel preferring the left subtree over the right subtree. 
Leaf nodes: All the leaf nodes except for the ones that are part of left or right boundary.
Reverse right boundary nodes: defined as the path from the right-most node to the root. The right-most node is the leaf node you could reach when you always travel preferring the right subtree over the left subtree. Exclude the root from this as it was already included in the traversal of left boundary nodes.
Note: If the root doesn't have a left subtree or right subtree, then the root itself is the left or right boundary. 

Example 1:

Input:
        1 
      /   \
     2     3  
    / \   / \ 
   4   5 6   7
      / \
     8   9
   
Output: 1 2 4 8 9 6 7 3
Explanation:
Example 2:

Input:
            1
           /
          2
        /  \
       4    9
     /  \    \
    6    5    3
             /  \
            7     8

Output: 1 2 4 6 5 7 8
Explanation:

As you can see we have not taken the right subtree. 





/* A binary tree Node
struct Node
{
    int data;
    Node* left, * right;
}; */

class Solution {
public:
    // function for leaf node condition checking function 
    bool isleaf(Node* root)
    {
        if(root->left==NULL && root->right==NULL)
        {
            return true;
        }
        else 
        {
            return false;
        }
    }
    // left boundary data collection 
    void leftBouTrav(Node* root, vector<int>&ans)
    {
        // go in right 
        root=root->left;
        while(root)
        {
            // not leaf put data
            if(!isleaf(root))
            {
                ans.push_back(root->data);
            }
            // go in left 
            if(root->left)
            {
                root=root->left;
            }
            else{
                root=root->right;
            }
        }
    }
    // leaf data collection function 
    void leafTrav(Node* root, vector<int> &ans)
    {
        // curr root is leaf then put data
        if(isleaf(root))
        {
            ans.push_back(root->data);
        }
        // go in left 
        if(root->left)
        {
            leafTrav(root->left,ans);
        }
        // go in right 
        if(root->right)
        {
            leafTrav(root->right,ans);
        }
    }
    // Right boundary data collection 
    void rightBouTrav(Node* root,vector<int> &ans)
    {
        // temporary vector for collectiong right node in up down fation 
        vector<int> temp;
        // going in right direction 
        root=root->right;

        while(root)
        {
            // if current root is not leaf then enter data
            if(!isleaf(root))
            {
                temp.push_back(root->data);
            }
            // go in right direction
            if(root->right)
            {
                root=root->right;
            }
            // if right not present go in left
            else 
            {
                root=root->left;
            }
        }
        // put data in reverse order 
        int n= temp.size();
        for(int i=n-1;i>=0;i--)
        {
            ans.push_back(temp[i]);
        }
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        // checking root node is null?
        if(!root)
        {
            return ans;
        }
        // if root is not leaf put it into vector
        if(!isleaf(root))
        {
            ans.push_back(root->data);
        }
        // puttig data of left of left
        leftBouTrav(root,ans);
        // Collecting data for leaf of the tree
        leafTrav(root,ans);
        // Collectirng data for right of tree
        rightBouTrav(root,ans);
        
        return ans;
        
        
    }
};
