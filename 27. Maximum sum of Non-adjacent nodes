Given a binary tree with a value associated with each node, we need to choose a subset of these nodes such that sum of chosen nodes is maximum under a constraint that no two chosen node in subset should be directly connected that is, if we have taken a node in our sum then we canâ€™t take its any children or parents in consideration and vice versa.

                                               

Example 1:

Input:
     11
    /  \
   1    2
Output: 11
Explanation: The maximum sum is sum of
node 11.
Example 2:

Input:
        1
      /   \
     2     3
    /     /  \
   4     5    6
Output: 16
Explanation: The maximum sum is sum of
nodes 1 4 5 6 , i.e 16. These nodes are
non adjacent.



//User function Template for C++

//Node Structure
/*
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/

class Solution{
  public:
  
    unordered_map<Node*, int> mp;
    //Function to return the maximum sum of non-adjacent nodes.
    int getMaxSum(Node *root) 
    {
        // Add your code here
        // Recurssive code
        
        // Base case 
        if(root==NULL)
        {
            return 0;
        }
        // it has two cases 
        // Case 1
        //taking the current node i.e with node 
        // Memorization step 
        
        if(mp[root])
        {
            return mp[root];
        }
        
        int withNode= root->data;
        
        //going for it's grand child in left and right 
        
        if(root->left)
        {
            withNode+=getMaxSum(root->left->left);
            withNode+=getMaxSum(root->left->right);
        }
        if(root->right)
        {
            withNode+=getMaxSum(root->right->left);
            withNode+=getMaxSum(root->right->right);
        }
        
        // Case 2 without node 
        
        int withoutNode=getMaxSum(root->left)+getMaxSum(root->right);
        
        
        return mp[root]= max(withNode, withoutNode);
        
    }
};
